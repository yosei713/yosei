#!/usr/bin/env python
# coding: utf-8

# # Pythonの使い方
# ## コメントのつけ方　<br>
# 行頭に#(シャープ)をつけることで行末までをコメントとして扱わせ、コードを実行するときに無視される。共同作業などのときによく用いる。<br><br>
# 
# 
#  
# ## 文字列の挿入のやり方　<br>
# 「''」または「""」で囲むことでその中身をコードではなく文字数として扱うことができる。<br><br>
# 
# 
# ## 数値 　<br>
# Pythonでは数値を用いることもできる。 文字列と違い、クォーテーションで囲む必要がない。 また、「+」、「-」、「/」、「%」のような記号を使うことで四則演算ができるようになる。なお、ウォーテーションで囲むと数値として扱われずに文字列として扱われるため演算が行われない点に注意。 <br><br>
# ## 変数　<br>
# A=Bとすることでコードの中のAという文字列にBを入れることができる。これは演算でも利用できて、例えば変数xを用いることで入力の手間を省くことができる。また、Pythonでは大文字と小文字が区分されることにも注意する。<br><br>
# ## 定数 <br>
# Pythonには定数を定義する構文がない。一方で定数を用いたいときは変数をすべて大文字で書くことがある。変数が全て大文字のときは注意する。<br><br>
# 

# 
# ## 予約語<br>
# 関数名や変数名に使用できない単語を予約語と呼ぶ。
# 予約語を用いてしまうと、構文エラー（SyntaxError)が起こってしまう。
# Python3系では、おおよそ約30個ある。
# 以下は全てPython3.6系での予約語であるため、それらは変数名などに使用できない。
# 
# ['False', 'None', 'True', 'and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']

# ## データ型<br>
# 「文字列」や「数値」という値は「データ型」と呼ばれ、様々な種類がある。
# 主なものは、整数型、文字列型、辞書型、リスト型だ。<br><br>
# ## 数値型<br>
# １）整数(int)<br>
# ２）小数・実数(float)  
# ３）複素数  以上の三つがある。
# 
# ## 文字列型　<br>
# +は文字の結合、* は文字の反復を示す。<br>
# 例)a=いろは　b=あいう <br>
# a+b=いろはあいう　<br>
# a* 3=いろはいろはいろは<br><br>
# ## 型変形(キャスト)<br>
# データ型の異なる文字列型と数値型を連結した場合エラーになってしまう。そこで、このエラーを回避するには、数値型を文字列型に変換することで、文字列同士の連結として扱われることになり、連結することができる。
# このようにデータ型を変えることを「型変換」または「キャスト」と呼ぶ。。
# 数値型を文字列型に変換するにはstr()を使う。<br><br>
# ## リスト型<br>
# 変数は、1つのデータしか管理できませんでしたが、リスト型は複数のデータ(変数)を管理できる。複数のデータを管理したい場合にリストを用いる。
# listは 配列名 = ["x","y","z"] という形式で宣言する。リストの中身は左から数え始め、最初は1ではなく、0から数えるので注意が必要。
# このリストの中身につけられた番号を添え字(そえじ)やインデックスなどと呼ぶ。append()を使うことで、listの末尾に要素を追加することができる。<br><br>
# ## 辞書型<br>
# リスト型はインデックス番号が0から始まり0から順に値が格納されていたが、辞書型は{}を使い囲う。
# その点は、辞書型と書き方は似ていますが、辞書型にはインデックス0から値が割り当てられている。
# そのため、リストはインデックス番号で値にアクセスできるのに対し、辞書型では任意のキー文字列で値にアクセスすることができる。<br><br>
# ## リスト型と辞書型の相違点
# ### 共通点
# リスト型も辞書型も、異なるデータ型(intやstr)などの要素の格納が可能であるという点。
# また、要素の書き換えが可能。
# ### 異なる点
# 要素のアクセスの仕方が異なる。
# リスト型はインデックス(添え字)で要素にアクセスしたが、辞書型はキー（文字列や数値）で要素にアクセスする。
# また、リスト型は[]を使いますが、辞書型は{}を使うという点でも異なる。  
# ## 制御構造
# プログラムは、上から下に順に処理が実行される。
# 決められた文法で処理方法を記述する。  
# ## コードブロックとインデント
# Pythonでは、インデント(字下げ）で処理をまとめる。
# このインデントはPythonの大きな特徴だ。基本的には、半角スペース4つ（もしくはタブキー）がインデントの役割だが、Pythonの文法では、
# 末尾にコロン「:」がつく構文が多い。  
# （条件分岐文（if, elif, else)、for文、while文、関数、クラスの定義）  
# ## 条件分岐(if文)
# プログラミングでは、ある条件に当てはまるかどうかによって処理を分ける。
# 構文は以下のようになる。
# if 条件A:  
#     条件AがTrueなら実行  
# elif 条件B:  
#     条件AがFalseかつ条件BがTrueなら実行  
# else:  
#     条件AもBもFalseなら実行  
# ## 条件式の作り方
# 条件式の中では、２つの値を比較するための記号「比較演算子」がよく使われる。右辺と左辺が等しいかどうかを表すには == を使う。
# また、右辺と左辺が等しくないかどうかを表すには != を使う。条件部分は、「if 条件式 :」のように書く。
# 行末のコロンをつけ忘れるとエラーになってしまいますので注意が必要。Pythonではコードの字下げ（インデント/半角スペース4つもしくは2つ）がそのままプログラムの動作に影響するので、字下げ（インデント）に気をつける。  
# ## ループ
# ほとんどのプログラミング言語で制御構文の基本はループだ。
# ループは複数回同じコードを実行するための制御構文だ。
# リストの各要素に同じ処理をしたいときなどに，よく使う。  
# ## for文
# for文は以下のようになってる。  # for ループ内変数 in リスト名:  
# 例)for i in ["apple", "banana", "melon"]:  
#     print(i)
# リストがループ内変数のiに格納され、それが出力(print)される。まず、先頭のapple(添え字0番目)という要素が変数iに代入され、print(i)で出力される。
# 次に、bananaが取り出され、iに代入、最後のmelonも同様にiに代入され出力される。
# リストの要素を全て取り出したため、このfor文の処理はその時点で終了する。  
# for文で一定回数の繰り返し処理を行うにはrange()関数を用いることが多い。
# 
# range()関数は次のような役割を持つ。
# 
# range(x): 0からx-1までの連番のリストを返す
# range(x,y): xからy-1までの連番のリストを返す  
# ## continue とbreak
# continueは処理を一回飛ばし、breakは処理を打ち切る意味を持つ。  
# ## while文
# while文は、特定条件を満たすまでループを繰り返す。
# 〜の間はずっとループといったイメージで、forほど使う頻度は少ないが、
# 明示的に無限ループを行いたい場合は、whileでのループ処理を記述する。  
# ## リスト内包表記
# リスト内包表記(List Comprehensions)は既存のリストやジェネレータから新しいリストを作るもの。リスト内包表記は、既存のリストから取り出した要素に対し処理をするだけでなく、条件に応じた場合にだけ新しいリストに追加したい場合にも使える。
# 内包表記のメリットは、処理を簡潔に書け、新しいリストなどへの追加メソッドの呼び出しにかかるコストを軽減できることだ。
# >result = [x** 2 for x in range(1,11)]  
# >print(result) # [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]  
# >    <br>
# > <br>
# >result = []  
# >for i in range(1,11):  
# >    result.append(i**2)  
# >  
# >print(result) # [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
# ## その他内包表示
# リスト内包表記以外にも、セットと辞書を生成する内包表記もある。
# セットと辞書内包表記の場合、生成する値によっては出力される値の順番が保持されない場合もある。
# >s = {x**2 for x in range(1,6)}  
# >print(s) # {1, 4, 9, 16, 25}  
# ## 標準入力
# input()を用いることで、ユーザからの入力を受け取ることが可能です。　　
# ## 関数とは
# 関数とはあるデータを受け取り、定められた独自の処理を実行し、その結果を返す命令のこと。
# 関数には2種類あり、1つ目は独自関数、2つ目は標準関数（組み込み関数）だ。
# 独自関数は、プログラマーが変数を作るのと同じように自由に名前と処理を考え、プログラマーが作ることもできる。
# 関数を組み合わせることで、プログラムを効率的に作ることができる。
# 標準関数は、Pythonが最初から用意してある関数。
# 標準関数は、print()やlen()、input()などを指す。
# プログラミングの世界では、自由に関数を定義し、作った関数を何度も呼び出して使うことができるという特徴がある。  
# ## 関数の定義方法
# 関数を定義するためには、defというキーワードを使う。なお、関数名に予約語を使わないようにする。  
# >def 関数名():  
# ## 引数
# 引数とは、関数を呼び出す際に関数に与える値のこと。
#     大きく2種類に分けることが出来る。   
# 1) 仮引数（関数の定義側で受け取る値）  
# 2) 実引数（関数の呼び出し側で与える値）  
# 
# >def say_hello(name):
# >    print("こんにちは" + str(name) + "さん")
# >
# >say_hello("山田") # こんにちは山田さん
# 
# ## len関数
# リスト内の要素の数を読み上げる。  
# ## return
# 演算結果を数値として保存できる。printは出力を主目的としているのに対して、returnは値を返すことを目的としている。
# ## 関数 変数のスコープ
# 変数はどこで作成したかによってスコープ（有効範囲）が違ってくる。
# >def add(x1):  
# >    x2 = 10   
# >    result = x1 + x2  
# >    print(result)  
# >  
# >add(5) # 5 + 10で15が出力  
# >print(x2)   
# 
# 上記のコードを実行すると、NameError: name 'x2' is not definedというエラーが発生する。
# これは関数内で定義した変数x2はローカル変数であり、ローカル変数か関数内部だけしか有効ではないため。  
# ## グローバル(global)宣言・グローバル変数
# 関数内でグローバル変数にアクセスするための宣言。
# ローカル変数（関数定義の内部で定義した関数）とグローバル変数（関数定義の外側で定義した変数がある。  
# ## ライブラリ
# ライブラリとは、ある程度まとまった汎用性の高い処理（関数・クラス・その他）を他のプログラムから読み込むことで、使うことが出来るようにしたファイルのこと。
# Python内では基本的にimportできるものをライブラリと呼ぶ。
# なお、ライブラリは一般的な呼び名であり、Pythonでは、基本的にライブラリという表記があったら、下記で説明するモジュールのことだと考えるのがよい。　　
# ## モジュールとパッケージ
# モジュールはPythonのコードをまとめたファイルであり、他のプログラムから再利用できるようにしたファイルのことを「モジュール｣と言います。
# それ単体では動作しませんが、importすることでモジュールが使えるようになる。
# パッケージとは__init__.pyと複数のモジュールがディレクトリに集まったもの。
# __init__.pyはパッケージディレクトリに置かれ、そのパッケージをインポートした際に実行される。  
# ## モジュールのインポート
# mport文の単純な使い方は次のようになる。 
# >import 読み込みたいモジュール  
# 
# 読み込みたいモジュールの部分は、他のPythonファイルのファイル名から拡張子の.pyを取り除いたもの。
# 例えば、sysモジュールを読み込みたい時は次のようにする。  
# >import sys
# 
# (sysモジュールは、Pythonをインストールした段階で利用できるモジュールの1つ。これを標準モジュールと呼び、他にもosモジュールなど様々ある。)  
# ## オブジェクト指向
# オブジェクト指向とはプログラミングのスタイル・手法のこと。開発の効率や保守性を上げることが出来る。  
# ## クラス
# クラスとはデータ構造を作る仕組みで、クラスを使うと新しいデータ型を作ることができる。
# >Sampleクラスを作ります。（保存するファイル名は任意の名前で可能。）  
#     class SampleClass: # クラス名の最初の文字は大文字で、また複数の単語の頭文字は大文字にする。  
#     # クラス内ではスペースを4つ開けてインデントしてください。クラスの中には変数やメソッド（クラスの中にある関数をメソッド）を定義できる。  
#      '''sample class '''  
# sample = SampleClass() # インスタンス クラスを使うには、関数の呼び出しのように、クラス名()することでインスタンス化する。こうすることでクラスを使うことができる。sampleにSampleClassのインスタンスが格納されました。クラスからつくられたこのデータをインスタンスと呼ぶ。    
# sample.name = "A"  
# sample2 = SampleClass() # このSample型から、いくつでもデータを作ることができるのでsample2を作りましょう。  
# sample2.name = "B" # sample2に対してさまざなな属性を作ることができる。  
# print(sample.name) # sampleの名前はA  
# print(sample2.name) # sample2の名前はB  
# 
# ## オブジェクト
# オブジェクトとはデータ（属性）とメソッド（クラスに定義された関数）を持ったものだ。
# そして、Pythonの値は全てオブジェクトであり、オブジェクトには実行で出来る関数（メソッド）が定義されている。  
# ## メソッド
# メソッドとはクラスに定義された関数のこと。  
# ## 継承
# 継承は既存のクラスをもとに新しいクラスを作る仕組み。
# 継承を利用することで既存のクラスの拡張が効率良く行なうことが可能になり、またプログラムの保守性も上がる。  
# ## 多重継承
# 多重継承とは、複数の親クラスから継承すること。  
# ## メソッドのオーバーライド
# メソッドを独自の機能で上書きすることをオーバーライド(over ride)と言う。
# 
